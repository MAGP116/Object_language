package parser;
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun May 16 11:48:21 CDT 2021
//----------------------------------------------------

import java_cup.runtime.*;
import Code.CodeSystem;
import Code.CodeNode;
import Code.SymbolTable;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun May 16 11:48:21 CDT 2021
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\107\000\002\002\003\000\002\002\004\000\002\003" +
    "\004\000\002\003\004\000\002\003\002\000\002\004\004" +
    "\000\002\004\011\000\002\005\005\000\002\005\002\000" +
    "\002\006\005\000\002\006\004\000\002\006\003\000\002" +
    "\006\004\000\002\006\005\000\002\006\007\000\002\006" +
    "\011\000\002\007\005\000\002\010\003\000\002\010\004" +
    "\000\002\010\004\000\002\011\006\000\002\012\004\000" +
    "\002\012\002\000\002\013\005\000\002\013\002\000\002" +
    "\014\004\000\002\015\005\000\002\016\005\000\002\016" +
    "\002\000\002\017\006\000\002\017\002\000\002\020\003" +
    "\000\002\020\003\000\002\020\003\000\002\020\003\000" +
    "\002\036\004\000\002\037\004\000\002\040\003\000\002" +
    "\040\003\000\002\041\003\000\002\042\003\000\002\021" +
    "\004\000\002\021\002\000\002\022\005\000\002\023\004" +
    "\000\002\023\002\000\002\024\005\000\002\025\005\000" +
    "\002\025\003\000\002\026\005\000\002\026\003\000\002" +
    "\027\004\000\002\027\003\000\002\030\005\000\002\030" +
    "\005\000\002\030\003\000\002\031\005\000\002\031\005" +
    "\000\002\031\003\000\002\032\005\000\002\032\005\000" +
    "\002\032\003\000\002\033\004\000\002\033\003\000\002" +
    "\034\005\000\002\034\003\000\002\034\003\000\002\034" +
    "\003\000\002\035\003\000\002\035\003\000\002\035\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\173\000\024\002\ufffd\005\017\010\013\012\011\013" +
    "\010\017\012\024\004\047\014\050\015\001\002\000\014" +
    "\025\104\026\110\031\112\032\105\047\174\001\002\000" +
    "\034\002\ufffd\005\017\007\ufffd\010\013\012\011\013\010" +
    "\017\012\021\ufffd\022\ufffd\024\004\033\ufffd\047\014\050" +
    "\015\001\002\000\004\016\171\001\002\000\004\002\001" +
    "\001\002\000\004\047\161\001\002\000\004\023\156\001" +
    "\002\000\024\013\010\024\004\036\024\042\042\045\037" +
    "\047\014\052\040\053\030\054\036\001\002\000\004\051" +
    "\103\001\002\000\072\002\ufff0\005\ufff0\007\ufff0\010\ufff0" +
    "\011\ufff0\012\ufff0\013\ufff0\014\ufff0\015\ufff0\016\ufff0\017" +
    "\ufff0\020\ufff0\021\ufff0\022\ufff0\024\ufff0\033\ufff0\034\ufff0" +
    "\035\ufff0\037\ufff0\040\ufff0\041\ufff0\042\ufff0\043\ufff0\044" +
    "\ufff0\046\ufff0\047\ufff0\050\ufff0\055\ufff0\001\002\000\006" +
    "\004\072\047\071\001\002\000\004\002\070\001\002\000" +
    "\024\013\010\024\004\036\024\042\042\045\037\047\014" +
    "\052\040\053\030\054\036\001\002\000\034\002\ufff6\005" +
    "\ufff6\007\ufff6\010\ufff6\012\ufff6\013\ufff6\017\ufff6\021\ufff6" +
    "\022\ufff6\024\ufff6\033\ufff6\047\ufff6\050\ufff6\001\002\000" +
    "\034\002\ufffd\005\017\007\ufffd\010\013\012\011\013\010" +
    "\017\012\021\ufffd\022\ufffd\024\004\033\ufffd\047\014\050" +
    "\015\001\002\000\014\002\ufffe\007\ufffe\021\ufffe\022\ufffe" +
    "\033\ufffe\001\002\000\070\002\uffc7\005\uffc7\007\uffc7\010" +
    "\uffc7\011\uffc7\012\uffc7\013\uffc7\014\uffc7\015\uffc7\017\uffc7" +
    "\020\uffc7\021\uffc7\022\uffc7\024\uffc7\033\uffc7\034\uffc7\035" +
    "\uffc7\037\uffc7\040\uffc7\041\uffc7\042\uffc7\043\061\044\062" +
    "\046\uffc7\047\uffc7\050\uffc7\055\uffc7\001\002\000\022\013" +
    "\010\024\004\042\042\045\037\047\014\052\040\053\030" +
    "\054\036\001\002\000\054\002\uffd1\005\uffd1\007\uffd1\010" +
    "\uffd1\011\uffd1\012\uffd1\013\uffd1\014\uffd1\015\uffd1\017\uffd1" +
    "\020\uffd1\021\uffd1\022\uffd1\024\uffd1\033\uffd1\034\uffd1\035" +
    "\051\046\uffd1\047\uffd1\050\uffd1\055\uffd1\001\002\000\036" +
    "\002\ufff5\005\ufff5\007\ufff5\010\ufff5\012\ufff5\013\ufff5\017" +
    "\ufff5\021\ufff5\022\ufff5\024\ufff5\033\ufff5\034\047\047\ufff5" +
    "\050\ufff5\001\002\000\054\002\uffcf\005\uffcf\007\uffcf\010" +
    "\uffcf\011\uffcf\012\uffcf\013\uffcf\014\uffcf\015\uffcf\017\uffcf" +
    "\020\uffcf\021\uffcf\022\uffcf\024\uffcf\033\uffcf\034\uffcf\035" +
    "\uffcf\046\uffcf\047\uffcf\050\uffcf\055\uffcf\001\002\000\070" +
    "\002\uffbc\005\uffbc\007\uffbc\010\uffbc\011\uffbc\012\uffbc\013" +
    "\uffbc\014\uffbc\015\uffbc\017\uffbc\020\uffbc\021\uffbc\022\uffbc" +
    "\024\uffbc\033\uffbc\034\uffbc\035\uffbc\037\uffbc\040\uffbc\041" +
    "\uffbc\042\uffbc\043\uffbc\044\uffbc\046\uffbc\047\uffbc\050\uffbc" +
    "\055\uffbc\001\002\000\064\002\uffca\005\uffca\007\uffca\010" +
    "\uffca\011\uffca\012\uffca\013\uffca\014\uffca\015\uffca\017\uffca" +
    "\020\uffca\021\uffca\022\uffca\024\uffca\033\uffca\034\uffca\035" +
    "\uffca\037\056\040\053\041\055\042\054\046\uffca\047\uffca" +
    "\050\uffca\055\uffca\001\002\000\070\002\uffbf\005\uffbf\007" +
    "\uffbf\010\uffbf\011\uffbf\012\uffbf\013\uffbf\014\uffbf\015\uffbf" +
    "\017\uffbf\020\uffbf\021\uffbf\022\uffbf\024\uffbf\033\uffbf\034" +
    "\uffbf\035\uffbf\037\uffbf\040\uffbf\041\uffbf\042\uffbf\043\uffbf" +
    "\044\uffbf\046\uffbf\047\uffbf\050\uffbf\055\uffbf\001\002\000" +
    "\070\002\uffbe\005\uffbe\007\uffbe\010\uffbe\011\uffbe\012\uffbe" +
    "\013\uffbe\014\uffbe\015\uffbe\017\uffbe\020\uffbe\021\uffbe\022" +
    "\uffbe\024\uffbe\033\uffbe\034\uffbe\035\uffbe\037\uffbe\040\uffbe" +
    "\041\uffbe\042\uffbe\043\uffbe\044\uffbe\046\uffbe\047\uffbe\050" +
    "\uffbe\055\uffbe\001\002\000\070\002\uffc0\005\uffc0\007\uffc0" +
    "\010\uffc0\011\uffc0\012\uffc0\013\uffc0\014\uffc0\015\uffc0\017" +
    "\uffc0\020\uffc0\021\uffc0\022\uffc0\024\uffc0\033\uffc0\034\uffc0" +
    "\035\uffc0\037\uffc0\040\uffc0\041\uffc0\042\uffc0\043\uffc0\044" +
    "\uffc0\046\uffc0\047\uffc0\050\uffc0\055\uffc0\001\002\000\054" +
    "\002\uffcd\005\uffcd\007\uffcd\010\uffcd\011\uffcd\012\uffcd\013" +
    "\uffcd\014\uffcd\015\uffcd\017\uffcd\020\uffcd\021\uffcd\022\uffcd" +
    "\024\uffcd\033\uffcd\034\uffcd\035\uffcd\046\uffcd\047\uffcd\050" +
    "\uffcd\055\uffcd\001\002\000\070\002\uffbb\005\uffbb\007\uffbb" +
    "\010\uffbb\011\uffbb\012\uffbb\013\uffbb\014\uffbb\015\uffbb\017" +
    "\uffbb\020\uffbb\021\uffbb\022\uffbb\024\uffbb\033\uffbb\034\uffbb" +
    "\035\uffbb\037\uffbb\040\uffbb\041\uffbb\042\uffbb\043\uffbb\044" +
    "\uffbb\046\uffbb\047\uffbb\050\uffbb\055\uffbb\001\002\000\024" +
    "\013\010\024\004\036\024\042\042\045\037\047\014\052" +
    "\040\053\030\054\036\001\002\000\070\002\uffbd\005\uffbd" +
    "\007\uffbd\010\uffbd\011\uffbd\012\uffbd\013\uffbd\014\uffbd\015" +
    "\uffbd\017\uffbd\020\uffbd\021\uffbd\022\uffbd\024\uffbd\033\uffbd" +
    "\034\uffbd\035\uffbd\037\uffbd\040\uffbd\041\uffbd\042\uffbd\043" +
    "\uffbd\044\uffbd\046\uffbd\047\uffbd\050\uffbd\055\uffbd\001\002" +
    "\000\070\002\uffc2\005\uffc2\007\uffc2\010\uffc2\011\uffc2\012" +
    "\uffc2\013\uffc2\014\uffc2\015\uffc2\017\uffc2\020\uffc2\021\uffc2" +
    "\022\uffc2\024\uffc2\033\uffc2\034\uffc2\035\uffc2\037\uffc2\040" +
    "\uffc2\041\uffc2\042\uffc2\043\uffc2\044\uffc2\046\uffc2\047\uffc2" +
    "\050\uffc2\055\uffc2\001\002\000\020\013\010\024\004\045" +
    "\037\047\014\052\040\053\030\054\036\001\002\000\070" +
    "\002\uffc4\005\uffc4\007\uffc4\010\uffc4\011\uffc4\012\uffc4\013" +
    "\uffc4\014\uffc4\015\uffc4\017\uffc4\020\uffc4\021\uffc4\022\uffc4" +
    "\024\uffc4\033\uffc4\034\uffc4\035\uffc4\037\uffc4\040\uffc4\041" +
    "\uffc4\042\uffc4\043\uffc4\044\uffc4\046\uffc4\047\uffc4\050\uffc4" +
    "\055\uffc4\001\002\000\070\002\uffc3\005\uffc3\007\uffc3\010" +
    "\uffc3\011\uffc3\012\uffc3\013\uffc3\014\uffc3\015\uffc3\017\uffc3" +
    "\020\uffc3\021\uffc3\022\uffc3\024\uffc3\033\uffc3\034\uffc3\035" +
    "\uffc3\037\uffc3\040\uffc3\041\uffc3\042\uffc3\043\uffc3\044\uffc3" +
    "\046\uffc3\047\uffc3\050\uffc3\055\uffc3\001\002\000\006\034" +
    "\047\046\046\001\002\000\070\002\uffc1\005\uffc1\007\uffc1" +
    "\010\uffc1\011\uffc1\012\uffc1\013\uffc1\014\uffc1\015\uffc1\017" +
    "\uffc1\020\uffc1\021\uffc1\022\uffc1\024\uffc1\033\uffc1\034\uffc1" +
    "\035\uffc1\037\uffc1\040\uffc1\041\uffc1\042\uffc1\043\uffc1\044" +
    "\uffc1\046\uffc1\047\uffc1\050\uffc1\055\uffc1\001\002\000\024" +
    "\013\010\024\004\036\024\042\042\045\037\047\014\052" +
    "\040\053\030\054\036\001\002\000\054\002\uffd2\005\uffd2" +
    "\007\uffd2\010\uffd2\011\uffd2\012\uffd2\013\uffd2\014\uffd2\015" +
    "\uffd2\017\uffd2\020\uffd2\021\uffd2\022\uffd2\024\uffd2\033\uffd2" +
    "\034\uffd2\035\051\046\uffd2\047\uffd2\050\uffd2\055\uffd2\001" +
    "\002\000\024\013\010\024\004\036\024\042\042\045\037" +
    "\047\014\052\040\053\030\054\036\001\002\000\054\002" +
    "\uffd0\005\uffd0\007\uffd0\010\uffd0\011\uffd0\012\uffd0\013\uffd0" +
    "\014\uffd0\015\uffd0\017\uffd0\020\uffd0\021\uffd0\022\uffd0\024" +
    "\uffd0\033\uffd0\034\uffd0\035\uffd0\046\uffd0\047\uffd0\050\uffd0" +
    "\055\uffd0\001\002\000\022\013\010\024\004\042\042\045" +
    "\037\047\014\052\040\053\030\054\036\001\002\000\022" +
    "\013\010\024\004\042\042\045\037\047\014\052\040\053" +
    "\030\054\036\001\002\000\022\013\010\024\004\042\042" +
    "\045\037\047\014\052\040\053\030\054\036\001\002\000" +
    "\022\013\010\024\004\042\042\045\037\047\014\052\040" +
    "\053\030\054\036\001\002\000\060\002\uffcc\005\uffcc\007" +
    "\uffcc\010\uffcc\011\uffcc\012\uffcc\013\uffcc\014\uffcc\015\uffcc" +
    "\017\uffcc\020\uffcc\021\uffcc\022\uffcc\024\uffcc\033\uffcc\034" +
    "\uffcc\035\uffcc\041\055\042\054\046\uffcc\047\uffcc\050\uffcc" +
    "\055\uffcc\001\002\000\070\002\uffc9\005\uffc9\007\uffc9\010" +
    "\uffc9\011\uffc9\012\uffc9\013\uffc9\014\uffc9\015\uffc9\017\uffc9" +
    "\020\uffc9\021\uffc9\022\uffc9\024\uffc9\033\uffc9\034\uffc9\035" +
    "\uffc9\037\uffc9\040\uffc9\041\uffc9\042\uffc9\043\061\044\062" +
    "\046\uffc9\047\uffc9\050\uffc9\055\uffc9\001\002\000\022\013" +
    "\010\024\004\042\042\045\037\047\014\052\040\053\030" +
    "\054\036\001\002\000\022\013\010\024\004\042\042\045" +
    "\037\047\014\052\040\053\030\054\036\001\002\000\070" +
    "\002\uffc5\005\uffc5\007\uffc5\010\uffc5\011\uffc5\012\uffc5\013" +
    "\uffc5\014\uffc5\015\uffc5\017\uffc5\020\uffc5\021\uffc5\022\uffc5" +
    "\024\uffc5\033\uffc5\034\uffc5\035\uffc5\037\uffc5\040\uffc5\041" +
    "\uffc5\042\uffc5\043\uffc5\044\uffc5\046\uffc5\047\uffc5\050\uffc5" +
    "\055\uffc5\001\002\000\070\002\uffc6\005\uffc6\007\uffc6\010" +
    "\uffc6\011\uffc6\012\uffc6\013\uffc6\014\uffc6\015\uffc6\017\uffc6" +
    "\020\uffc6\021\uffc6\022\uffc6\024\uffc6\033\uffc6\034\uffc6\035" +
    "\uffc6\037\uffc6\040\uffc6\041\uffc6\042\uffc6\043\uffc6\044\uffc6" +
    "\046\uffc6\047\uffc6\050\uffc6\055\uffc6\001\002\000\070\002" +
    "\uffc8\005\uffc8\007\uffc8\010\uffc8\011\uffc8\012\uffc8\013\uffc8" +
    "\014\uffc8\015\uffc8\017\uffc8\020\uffc8\021\uffc8\022\uffc8\024" +
    "\uffc8\033\uffc8\034\uffc8\035\uffc8\037\uffc8\040\uffc8\041\uffc8" +
    "\042\uffc8\043\061\044\062\046\uffc8\047\uffc8\050\uffc8\055" +
    "\uffc8\001\002\000\060\002\uffcb\005\uffcb\007\uffcb\010\uffcb" +
    "\011\uffcb\012\uffcb\013\uffcb\014\uffcb\015\uffcb\017\uffcb\020" +
    "\uffcb\021\uffcb\022\uffcb\024\uffcb\033\uffcb\034\uffcb\035\uffcb" +
    "\041\055\042\054\046\uffcb\047\uffcb\050\uffcb\055\uffcb\001" +
    "\002\000\054\002\uffce\005\uffce\007\uffce\010\uffce\011\uffce" +
    "\012\uffce\013\uffce\014\uffce\015\uffce\017\uffce\020\uffce\021" +
    "\uffce\022\uffce\024\uffce\033\uffce\034\uffce\035\uffce\046\uffce" +
    "\047\uffce\050\uffce\055\uffce\001\002\000\004\002\000\001" +
    "\002\000\034\002\ufffc\005\ufffc\007\ufffc\010\ufffc\012\ufffc" +
    "\013\ufffc\017\ufffc\021\ufffc\022\ufffc\024\ufffc\033\ufffc\047" +
    "\ufffc\050\ufffc\001\002\000\004\047\073\001\002\000\006" +
    "\006\ufff9\050\ufff9\001\002\000\006\006\075\050\076\001" +
    "\002\000\024\005\017\007\ufffd\010\013\012\011\013\010" +
    "\017\012\024\004\047\014\050\015\001\002\000\004\047" +
    "\077\001\002\000\006\006\ufffa\050\ufffa\001\002\000\004" +
    "\007\101\001\002\000\034\002\ufffb\005\ufffb\007\ufffb\010" +
    "\ufffb\012\ufffb\013\ufffb\017\ufffb\021\ufffb\022\ufffb\024\ufffb" +
    "\033\ufffb\047\ufffb\050\ufffb\001\002\000\004\011\145\001" +
    "\002\000\020\011\uffe5\024\uffe5\025\104\026\110\031\112" +
    "\032\105\055\uffe5\001\002\000\006\027\143\030\141\001" +
    "\002\000\104\002\uffd9\005\uffd9\007\uffd9\010\uffd9\011\uffd9" +
    "\012\uffd9\013\uffd9\014\uffd9\015\uffd9\016\uffd9\017\uffd9\020" +
    "\uffd9\021\uffd9\022\uffd9\024\uffd9\033\uffd9\034\uffd9\035\uffd9" +
    "\036\uffd9\037\uffd9\040\uffd9\041\uffd9\042\uffd9\043\uffd9\044" +
    "\uffd9\045\uffd9\046\uffd9\047\uffd9\050\uffd9\052\uffd9\053\uffd9" +
    "\054\uffd9\055\uffd9\001\002\000\104\002\uffe1\005\uffe1\007" +
    "\uffe1\010\uffe1\011\uffe1\012\uffe1\013\uffe1\014\uffe1\015\uffe1" +
    "\016\uffe1\017\uffe1\020\uffe1\021\uffe1\022\uffe1\024\uffe1\033" +
    "\uffe1\034\uffe1\035\uffe1\036\uffe1\037\uffe1\040\uffe1\041\uffe1" +
    "\042\uffe1\043\uffe1\044\uffe1\045\uffe1\046\uffe1\047\uffe1\050" +
    "\uffe1\052\uffe1\053\uffe1\054\uffe1\055\uffe1\001\002\000\004" +
    "\011\uffe8\001\002\000\006\027\143\030\141\001\002\000" +
    "\024\013\010\024\004\036\024\042\042\045\037\047\014" +
    "\052\040\053\030\054\036\001\002\000\104\002\uffda\005" +
    "\uffda\007\uffda\010\uffda\011\uffda\012\uffda\013\uffda\014\uffda" +
    "\015\uffda\016\uffda\017\uffda\020\uffda\021\uffda\022\uffda\024" +
    "\uffda\033\uffda\034\uffda\035\uffda\036\uffda\037\uffda\040\uffda" +
    "\041\uffda\042\uffda\043\uffda\044\uffda\045\uffda\046\uffda\047" +
    "\uffda\050\uffda\052\uffda\053\uffda\054\uffda\055\uffda\001\002" +
    "\000\104\002\uffdf\005\uffdf\007\uffdf\010\uffdf\011\uffdf\012" +
    "\uffdf\013\uffdf\014\uffdf\015\uffdf\016\uffdf\017\uffdf\020\uffdf" +
    "\021\uffdf\022\uffdf\024\uffdf\033\uffdf\034\uffdf\035\uffdf\036" +
    "\uffdf\037\uffdf\040\uffdf\041\uffdf\042\uffdf\043\uffdf\044\uffdf" +
    "\045\uffdf\046\uffdf\047\uffdf\050\uffdf\052\uffdf\053\uffdf\054" +
    "\uffdf\055\uffdf\001\002\000\104\002\uffe2\005\uffe2\007\uffe2" +
    "\010\uffe2\011\uffe2\012\uffe2\013\uffe2\014\uffe2\015\uffe2\016" +
    "\uffe2\017\uffe2\020\uffe2\021\uffe2\022\uffe2\024\uffe2\033\uffe2" +
    "\034\uffe2\035\uffe2\036\uffe2\037\uffe2\040\uffe2\041\uffe2\042" +
    "\uffe2\043\uffe2\044\uffe2\045\uffe2\046\uffe2\047\uffe2\050\uffe2" +
    "\052\uffe2\053\uffe2\054\uffe2\055\uffe2\001\002\000\010\011" +
    "\uffd7\024\117\055\uffd7\001\002\000\104\002\uffe0\005\uffe0" +
    "\007\uffe0\010\uffe0\011\uffe0\012\uffe0\013\uffe0\014\uffe0\015" +
    "\uffe0\016\uffe0\017\uffe0\020\uffe0\021\uffe0\022\uffe0\024\uffe0" +
    "\033\uffe0\034\uffe0\035\uffe0\036\uffe0\037\uffe0\040\uffe0\041" +
    "\uffe0\042\uffe0\043\uffe0\044\uffe0\045\uffe0\046\uffe0\047\uffe0" +
    "\050\uffe0\052\uffe0\053\uffe0\054\uffe0\055\uffe0\001\002\000" +
    "\004\050\131\001\002\000\010\011\uffd7\024\117\055\uffd7" +
    "\001\002\000\006\011\uffd4\055\122\001\002\000\024\005" +
    "\017\010\013\012\011\013\010\017\012\024\004\033\ufffd" +
    "\047\014\050\015\001\002\000\006\011\uffd4\055\122\001" +
    "\002\000\004\011\uffe7\001\002\000\004\011\uffd5\001\002" +
    "\000\004\033\127\001\002\000\006\011\uffd3\055\uffd3\001" +
    "\002\000\006\011\uffd8\055\uffd8\001\002\000\004\047\132" +
    "\001\002\000\010\011\uffd6\024\uffd6\055\uffd6\001\002\000" +
    "\014\011\uffe3\014\134\024\uffe3\034\047\055\uffe3\001\002" +
    "\000\012\025\104\026\110\031\112\032\105\001\002\000" +
    "\010\011\uffe6\024\uffe6\055\uffe6\001\002\000\024\013\010" +
    "\024\004\036\024\042\042\045\037\047\014\052\040\053" +
    "\030\054\036\001\002\000\014\011\uffe3\014\134\024\uffe3" +
    "\034\047\055\uffe3\001\002\000\010\011\uffe4\024\uffe4\055" +
    "\uffe4\001\002\000\104\002\uffdb\005\uffdb\007\uffdb\010\uffdb" +
    "\011\uffdb\012\uffdb\013\uffdb\014\uffdb\015\uffdb\016\uffdb\017" +
    "\uffdb\020\uffdb\021\uffdb\022\uffdb\024\uffdb\033\uffdb\034\uffdb" +
    "\035\uffdb\036\uffdb\037\uffdb\040\uffdb\041\uffdb\042\uffdb\043" +
    "\uffdb\044\uffdb\045\uffdb\046\uffdb\047\uffdb\050\uffdb\052\uffdb" +
    "\053\uffdb\054\uffdb\055\uffdb\001\002\000\104\002\uffdd\005" +
    "\uffdd\007\uffdd\010\uffdd\011\uffdd\012\uffdd\013\uffdd\014\uffdd" +
    "\015\uffdd\016\uffdd\017\uffdd\020\uffdd\021\uffdd\022\uffdd\024" +
    "\uffdd\033\uffdd\034\uffdd\035\uffdd\036\uffdd\037\uffdd\040\uffdd" +
    "\041\uffdd\042\uffdd\043\uffdd\044\uffdd\045\uffdd\046\uffdd\047" +
    "\uffdd\050\uffdd\052\uffdd\053\uffdd\054\uffdd\055\uffdd\001\002" +
    "\000\104\002\uffdc\005\uffdc\007\uffdc\010\uffdc\011\uffdc\012" +
    "\uffdc\013\uffdc\014\uffdc\015\uffdc\016\uffdc\017\uffdc\020\uffdc" +
    "\021\uffdc\022\uffdc\024\uffdc\033\uffdc\034\uffdc\035\uffdc\036" +
    "\uffdc\037\uffdc\040\uffdc\041\uffdc\042\uffdc\043\uffdc\044\uffdc" +
    "\045\uffdc\046\uffdc\047\uffdc\050\uffdc\052\uffdc\053\uffdc\054" +
    "\uffdc\055\uffdc\001\002\000\104\002\uffde\005\uffde\007\uffde" +
    "\010\uffde\011\uffde\012\uffde\013\uffde\014\uffde\015\uffde\016" +
    "\uffde\017\uffde\020\uffde\021\uffde\022\uffde\024\uffde\033\uffde" +
    "\034\uffde\035\uffde\036\uffde\037\uffde\040\uffde\041\uffde\042" +
    "\uffde\043\uffde\044\uffde\045\uffde\046\uffde\047\uffde\050\uffde" +
    "\052\uffde\053\uffde\054\uffde\055\uffde\001\002\000\034\002" +
    "\ufff8\005\ufff8\007\ufff8\010\ufff8\012\ufff8\013\ufff8\017\ufff8" +
    "\021\ufff8\022\ufff8\024\ufff8\033\ufff8\047\ufff8\050\ufff8\001" +
    "\002\000\006\020\147\034\047\001\002\000\026\005\017" +
    "\010\013\012\011\013\010\017\012\021\ufffd\022\ufffd\024" +
    "\004\047\014\050\015\001\002\000\006\021\152\022\151" +
    "\001\002\000\024\005\017\010\013\012\011\013\010\017" +
    "\012\021\ufffd\024\004\047\014\050\015\001\002\000\034" +
    "\002\ufff3\005\ufff3\007\ufff3\010\ufff3\012\ufff3\013\ufff3\017" +
    "\ufff3\021\ufff3\022\ufff3\024\ufff3\033\ufff3\047\ufff3\050\ufff3" +
    "\001\002\000\004\021\154\001\002\000\034\002\ufff2\005" +
    "\ufff2\007\ufff2\010\ufff2\012\ufff2\013\ufff2\017\ufff2\021\ufff2" +
    "\022\ufff2\024\ufff2\033\ufff2\047\ufff2\050\ufff2\001\002\000" +
    "\034\002\ufff7\005\ufff7\007\ufff7\010\ufff7\012\ufff7\013\ufff7" +
    "\017\ufff7\021\ufff7\022\ufff7\024\ufff7\033\ufff7\047\ufff7\050" +
    "\ufff7\001\002\000\004\051\157\001\002\000\010\052\040" +
    "\053\030\054\036\001\002\000\034\002\ufff1\005\ufff1\007" +
    "\ufff1\010\ufff1\012\ufff1\013\ufff1\017\ufff1\021\ufff1\022\ufff1" +
    "\024\ufff1\033\ufff1\047\ufff1\050\ufff1\001\002\000\026\013" +
    "\010\015\uffeb\024\004\036\024\042\042\045\037\047\014" +
    "\052\040\053\030\054\036\001\002\000\010\014\165\015" +
    "\uffe9\034\047\001\002\000\004\015\164\001\002\000\070" +
    "\002\uffed\005\uffed\007\uffed\010\uffed\011\uffed\012\uffed\013" +
    "\uffed\014\uffed\015\uffed\017\uffed\020\uffed\021\uffed\022\uffed" +
    "\024\uffed\033\uffed\034\uffed\035\uffed\037\uffed\040\uffed\041" +
    "\uffed\042\uffed\043\uffed\044\uffed\046\uffed\047\uffed\050\uffed" +
    "\055\uffed\001\002\000\024\013\010\024\004\036\024\042" +
    "\042\045\037\047\014\052\040\053\030\054\036\001\002" +
    "\000\004\015\uffec\001\002\000\010\014\165\015\uffe9\034" +
    "\047\001\002\000\004\015\uffea\001\002\000\024\013\010" +
    "\024\004\036\024\042\042\045\037\047\014\052\040\053" +
    "\030\054\036\001\002\000\036\002\ufff4\005\ufff4\007\ufff4" +
    "\010\ufff4\012\ufff4\013\ufff4\017\ufff4\021\ufff4\022\ufff4\024" +
    "\ufff4\033\ufff4\034\047\047\ufff4\050\ufff4\001\002\000\014" +
    "\002\uffff\007\uffff\021\uffff\022\uffff\033\uffff\001\002\000" +
    "\072\002\uffee\005\uffee\007\uffee\010\uffee\011\uffee\012\uffee" +
    "\013\uffee\014\uffee\015\uffee\016\uffee\017\uffee\020\uffee\021" +
    "\uffee\022\uffee\024\uffee\033\uffee\034\uffee\035\uffee\037\uffee" +
    "\040\uffee\041\uffee\042\uffee\043\uffee\044\uffee\046\uffee\047" +
    "\uffee\050\uffee\055\uffee\001\002\000\072\002\uffef\005\uffef" +
    "\007\uffef\010\uffef\011\uffef\012\uffef\013\uffef\014\uffef\015" +
    "\uffef\016\uffef\017\uffef\020\uffef\021\uffef\022\uffef\024\uffef" +
    "\033\uffef\034\uffef\035\uffef\037\uffef\040\uffef\041\uffef\042" +
    "\uffef\043\uffef\044\uffef\046\uffef\047\uffef\050\uffef\055\uffef" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\173\000\016\002\015\003\006\004\004\006\020\010" +
    "\005\011\017\001\001\000\014\020\174\036\113\037\105" +
    "\041\115\042\112\001\001\000\014\003\172\004\004\006" +
    "\020\010\005\011\017\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\154\001\001\000" +
    "\030\010\033\011\031\025\145\026\024\027\026\030\034" +
    "\031\030\032\022\033\042\034\040\035\032\001\001\000" +
    "\004\014\101\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\010\033\011\031\025\025\026" +
    "\024\027\026\030\034\031\030\032\022\033\042\034\040" +
    "\035\032\001\001\000\002\001\001\000\014\003\021\004" +
    "\004\006\020\010\005\011\017\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\010\033\011\031\030\066\031" +
    "\030\032\022\033\042\034\040\035\032\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\010\033\011\031\025\044\026\024\027\026\030\034" +
    "\031\030\032\022\033\042\034\040\035\032\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\010\033\011\031" +
    "\034\043\035\032\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\010\033" +
    "\011\031\026\047\027\026\030\034\031\030\032\022\033" +
    "\042\034\040\035\032\001\001\000\002\001\001\000\024" +
    "\010\033\011\031\027\051\030\034\031\030\032\022\033" +
    "\042\034\040\035\032\001\001\000\002\001\001\000\020" +
    "\010\033\011\031\031\065\032\022\033\042\034\040\035" +
    "\032\001\001\000\016\010\033\011\031\032\064\033\042" +
    "\034\040\035\032\001\001\000\016\010\033\011\031\032" +
    "\057\033\042\034\040\035\032\001\001\000\020\010\033" +
    "\011\031\031\056\032\022\033\042\034\040\035\032\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\010\033" +
    "\011\031\033\063\034\040\035\032\001\001\000\014\010" +
    "\033\011\031\033\062\034\040\035\032\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\073\001\001\000\002\001" +
    "\001\000\014\003\077\004\004\006\020\010\005\011\017" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\015\106" +
    "\016\114\020\110\036\113\037\105\041\115\042\112\001" +
    "\001\000\004\040\143\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\040\141\001\001\000" +
    "\030\010\033\011\031\025\132\026\024\027\026\030\034" +
    "\031\030\032\022\033\042\034\040\035\032\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\021\120\022\117\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\021\127\022\117\001\001\000\006\023\123" +
    "\024\122\001\001\000\014\003\125\004\004\006\020\010" +
    "\005\011\017\001\001\000\006\023\124\024\122\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\017\134\001\001\000\014\020\135\036" +
    "\113\037\105\041\115\042\112\001\001\000\002\001\001" +
    "\000\030\010\033\011\031\025\136\026\024\027\026\030" +
    "\034\031\030\032\022\033\042\034\040\035\032\001\001" +
    "\000\004\017\137\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\003\147\004" +
    "\004\006\020\010\005\011\017\001\001\000\002\001\001" +
    "\000\014\003\152\004\004\006\020\010\005\011\017\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\035\157\001" +
    "\001\000\002\001\001\000\032\010\033\011\031\012\162" +
    "\025\161\026\024\027\026\030\034\031\030\032\022\033" +
    "\042\034\040\035\032\001\001\000\004\013\165\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\010\033\011" +
    "\031\025\166\026\024\027\026\030\034\031\030\032\022" +
    "\033\042\034\040\035\032\001\001\000\002\001\001\000" +
    "\004\013\167\001\001\000\002\001\001\000\030\010\033" +
    "\011\031\025\171\026\024\027\026\030\034\031\030\032" +
    "\022\033\042\034\040\035\032\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




   

    public void report_error(String message, Object info) {
   
        StringBuilder m = new StringBuilder("Error");
   
         if (info instanceof java_cup.runtime.Symbol) {
            
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
             if (s.left >= 0) {                
                  m.append(" in line "+(s.left+1));   
               	 
               	  if (s.right >= 0)                    
                 	 m.append(", column "+(s.right+1));
            }
        }
   
        m.append(" : "+message);
   
        System.err.println(m);
    }
   
    
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {



 

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Num ::= BOOL 
            {
              CodeNode RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		/*System.out.println(b)*/;RESULT = new CodeSystem.CodeNodeBool(b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Num",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Num ::= FLOTANTE 
            {
              CodeNode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		/*System.out.println(f)*/;RESULT = new CodeSystem.CodeNodeFloat(f);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Num",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Num ::= ENTERO 
            {
              CodeNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		/*System.out.println(e)*/;RESULT = new CodeSystem.CodeNodeInteger(e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Num",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // DataOp ::= Num 
            {
              CodeNode RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CodeNode n = (CodeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = n;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DataOp",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // DataOp ::= Funcion 
            {
              CodeNode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CodeNode f = (CodeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = f;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DataOp",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // DataOp ::= Contenedor 
            {
              CodeNode RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CodeNode c = (CodeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new CodeSystem.CodeNodeContainerConsult(
	new java_cup.runtime.Symbol[] {(Symbol) CUP$parser$stack.peek()}
	,c);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DataOp",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // DataOp ::= PARAP OrOp PARCIE 
            {
              CodeNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CodeNode o = (CodeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = o;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DataOp",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // UnaOp ::= DataOp 
            {
              CodeNode RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CodeNode d = (CodeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = d;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("UnaOp",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // UnaOp ::= RESTA DataOp 
            {
              CodeNode RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CodeNode d = (CodeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new CodeSystem.CodeNodeUnaOp(
        new java_cup.runtime.Symbol[] {(Symbol) CUP$parser$stack.peek()},
         d);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("UnaOp",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // MulOp ::= UnaOp 
            {
              CodeNode RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CodeNode u = (CodeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = u;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MulOp",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // MulOp ::= MulOp DIVISION UnaOp 
            {
              CodeNode RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CodeNode m = (CodeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CodeNode u = (CodeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new CodeSystem.CodeNodeDivision(
	new java_cup.runtime.Symbol[] {(Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2),(Symbol) CUP$parser$stack.peek()},
	m,u);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MulOp",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // MulOp ::= MulOp MULTIPLICACION UnaOp 
            {
              CodeNode RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CodeNode m = (CodeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CodeNode u = (CodeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new CodeSystem.CodeNodeMultiplication(
        new java_cup.runtime.Symbol[] {(Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2),(Symbol) CUP$parser$stack.peek()},
        m,u);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MulOp",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // SumOp ::= MulOp 
            {
              CodeNode RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CodeNode m = (CodeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = m;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SumOp",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // SumOp ::= SumOp RESTA MulOp 
            {
              CodeNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CodeNode s = (CodeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CodeNode m = (CodeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new CodeSystem.CodeNodeSubtraction(
	new java_cup.runtime.Symbol[] {(Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2),(Symbol) CUP$parser$stack.peek()},
	s,m);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SumOp",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // SumOp ::= SumOp SUMA MulOp 
            {
              CodeNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CodeNode s = (CodeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CodeNode m = (CodeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new CodeSystem.CodeNodeSum(
    new java_cup.runtime.Symbol[] {(Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2),(Symbol) CUP$parser$stack.peek()},
    s,m);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SumOp",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // CompOp ::= SumOp 
            {
              CodeNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CodeNode s = (CodeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CompOp",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // CompOp ::= SumOp MAYORIGUAL SumOp 
            {
              CodeNode RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CodeNode s1 = (CodeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CodeNode s2 = (CodeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new CodeSystem.CodeNodeGreaterEquals(
	new java_cup.runtime.Symbol[] {(Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2),(Symbol) CUP$parser$stack.peek()},
	s1,s2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CompOp",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // CompOp ::= SumOp IGUALDAD SumOp 
            {
              CodeNode RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CodeNode s1 = (CodeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CodeNode s2 = (CodeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new CodeSystem.CodeNodeEquals(
    new java_cup.runtime.Symbol[] {(Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2),(Symbol) CUP$parser$stack.peek()},
    s1,s2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CompOp",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // NotOp ::= CompOp 
            {
              CodeNode RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CodeNode c = (CodeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = c;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NotOp",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // NotOp ::= NOT CompOp 
            {
              CodeNode RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CodeNode c = (CodeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new CodeSystem.CodeNodeNegation(
    new java_cup.runtime.Symbol[] {(Symbol) CUP$parser$stack.peek()}
    ,c);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NotOp",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // AndOp ::= NotOp 
            {
              CodeNode RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CodeNode n = (CodeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = n;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AndOp",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // AndOp ::= AndOp AND NotOp 
            {
              CodeNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CodeNode a = (CodeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CodeNode n = (CodeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new CodeSystem.CodeNodeAND(
    new java_cup.runtime.Symbol[] {(Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2),(Symbol) CUP$parser$stack.peek()},
    a,n);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AndOp",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // OrOp ::= AndOp 
            {
              CodeNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CodeNode a = (CodeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OrOp",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // OrOp ::= OrOp OR AndOp 
            {
              CodeNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CodeNode o = (CodeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CodeNode a = (CodeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new CodeSystem.CodeNodeOR(
    new java_cup.runtime.Symbol[] {(Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2),(Symbol) CUP$parser$stack.peek()},
    o,a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OrOp",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ObjTrigger ::= TIPOTRIGGER Bloque ENDTRIGGER 
            {
              CodeNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CodeNode b = (CodeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new CodeSystem.CodeNodeObjectTrigger(t,b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ObjTrigger",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ObjTriggers ::= 
            {
              CodeNode RESULT =null;
		RESULT = new CodeSystem.CodeNodeEmpty();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ObjTriggers",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ObjTriggers ::= ObjTrigger ObjTriggers 
            {
              CodeNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CodeNode t = (CodeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CodeNode ts = (CodeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new CodeSystem.CodeNodeBlock(t,ts);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ObjTriggers",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ObjVar ::= MI TIPO ID 
            {
              CodeNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new CodeSystem.CodeNodeObjectDecls(t,i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ObjVar",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ObjVars ::= 
            {
              CodeNode RESULT =null;
		RESULT = new CodeSystem.CodeNodeEmpty();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ObjVars",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ObjVars ::= ObjVar ObjVars 
            {
              CodeNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CodeNode v = (CodeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CodeNode vs = (CodeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new CodeSystem.CodeNodeBlock(v,vs);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ObjVars",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Acel ::= ACELERACION 
            {
              String RESULT =null;
		RESULT = "a$";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Acel",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Vel ::= VELOCIDAD 
            {
              String RESULT =null;
		RESULT = "v$";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Vel",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Cord ::= Y 
            {
              String RESULT =null;
		RESULT = "y";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Cord",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Cord ::= X 
            {
              String RESULT =null;
		RESULT = "x";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Cord",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Dir ::= DIRECCION Cord 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = "d$"+c;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Dir",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Pos ::= POSICION Cord 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= "p$"+c;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Pos",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ObjAtrib ::= Acel 
            {
              CodeNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new CodeSystem.CodeNodeContainer(false,a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ObjAtrib",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ObjAtrib ::= Vel 
            {
              CodeNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new CodeSystem.CodeNodeContainer(false,v);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ObjAtrib",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ObjAtrib ::= Dir 
            {
              CodeNode RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new CodeSystem.CodeNodeContainer(false,d);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ObjAtrib",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ObjAtrib ::= Pos 
            {
              CodeNode RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new CodeSystem.CodeNodeContainer(false,p);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ObjAtrib",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ObjAtribsT ::= 
            {
              CodeNode RESULT =null;
		RESULT = new CodeSystem.CodeNodeEmpty();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ObjAtribsT",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ObjAtribsT ::= COMMA ObjAtrib OrOp ObjAtribsT 
            {
              CodeNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CodeNode a = (CodeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CodeNode o = (CodeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CodeNode t = (CodeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    CodeNode assignation = new CodeSystem.CodeNodeAssignation(
        new java_cup.runtime.Symbol[] {(Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4),
        (Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)}
    ,a,o);
    RESULT = new CodeSystem.CodeNodeBlock(assignation,t);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ObjAtribsT",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ObjAtribs ::= 
            {
              CodeNode RESULT =null;
		RESULT = new CodeSystem.CodeNodeEmpty();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ObjAtribs",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ObjAtribs ::= ObjAtrib OrOp ObjAtribsT 
            {
              CodeNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CodeNode a = (CodeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CodeNode o = (CodeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CodeNode t = (CodeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    CodeNode assignation = new CodeSystem.CodeNodeAssignation(
        new java_cup.runtime.Symbol[] {(Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4),
        (Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)}
    ,a,o);
    RESULT = new CodeSystem.CodeNodeBlock(assignation,t);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ObjAtribs",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ObjDecls ::= ObjAtribs ObjVars ObjTriggers 
            {
              CodeNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CodeNode a = (CodeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CodeNode v = (CodeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CodeNode t = (CodeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new CodeSystem.CodeNodeObjectBlock(a,v,t);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ObjDecls",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Objeto ::= TIPOOBJETO ObjDecls 
            {
              CodeNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CodeNode o = (CodeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new CodeSystem.CodeNodeCreateObject(t,o);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Objeto",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // funcArgsT ::= 
            {
              CodeNode RESULT =null;
		RESULT = new CodeSystem.CodeNodeEmpty();//TODO---------------
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcArgsT",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // funcArgsT ::= COMMA OrOp funcArgsT 
            {
              CodeNode RESULT =null;
		RESULT = new CodeSystem.CodeNodeEmpty();//TODO---------------
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcArgsT",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // funcArgs ::= 
            {
              CodeNode RESULT =null;
		RESULT = new CodeSystem.CodeNodeEmpty();//TODO---------------
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcArgs",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // funcArgs ::= OrOp funcArgsT 
            {
              CodeNode RESULT =null;
		RESULT = new CodeSystem.CodeNodeEmpty();//TODO---------------
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcArgs",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Funcion ::= REALIZAR ID funcArgs ENDREALIZAR 
            {
              CodeNode RESULT =null;
		RESULT = new CodeSystem.CodeNodeEmpty();//TODO---------------
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Funcion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Contenedor ::= MI ID 
            {
              CodeNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new CodeSystem.CodeNodeContainer(false,i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Contenedor",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Contenedor ::= MI ObjAtrib 
            {
              CodeNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CodeNode o = (CodeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = o;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Contenedor",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Contenedor ::= ID 
            {
              CodeNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new CodeSystem.CodeNodeContainer(true,i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Contenedor",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Buscar ::= BUSCAR TIPOOBJETO Num 
            {
              CodeNode RESULT =null;
		RESULT = new CodeSystem.CodeNodeEmpty();//TODO---------------
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Buscar",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Seque ::= IF OrOp THEN Bloque ELSE Bloque ENDIF 
            {
              CodeNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		CodeNode o = (CodeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int b1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		CodeNode b1 = (CodeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CodeNode b2 = (CodeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	RESULT = new  CodeSystem.CodeNodeIfElse(
	new java_cup.runtime.Symbol[] {(Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2),(Symbol) CUP$parser$stack.peek()},
	o,b1,b2
	);
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Seque",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Seque ::= IF OrOp THEN Bloque ENDIF 
            {
              CodeNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		CodeNode o = (CodeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CodeNode b = (CodeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new CodeSystem.CodeNodeIf(new java_cup.runtime.Symbol[] {(Symbol) CUP$parser$stack.peek()},o,b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Seque",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Seque ::= Contenedor ASIGNACION OrOp 
            {
              CodeNode RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CodeNode c = (CodeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CodeNode o = (CodeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new CodeSystem.CodeNodeAssignation(
	new java_cup.runtime.Symbol[] {(Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2),(Symbol) CUP$parser$stack.peek()},
	c,o);//System.out.println(o.run());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Seque",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Seque ::= RETURN OrOp 
            {
              CodeNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CodeNode o = (CodeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = o;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Seque",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Seque ::= Funcion 
            {
              CodeNode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CodeNode f = (CodeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = f;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Seque",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Seque ::= BORRAR Buscar 
            {
              CodeNode RESULT =null;
		RESULT = new CodeSystem.CodeNodeEmpty();//TODO---------------
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Seque",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Seque ::= CREAR Objeto ENDCREAR 
            {
              CodeNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CodeNode o = (CodeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = o;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Seque",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Args ::= 
            {
              CodeNode RESULT =null;
		RESULT = new CodeSystem.CodeNodeEmpty();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Args",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Args ::= Args TIPO ID 
            {
              CodeNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CodeNode a = (CodeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new CodeSystem.CodeNodeBlock(a,new CodeSystem.CodeNodeDecls(t,i));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Args",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Decl ::= TIPO FUNCION ID Args ENDARGS Bloque ENDFUNCION 
            {
              CodeNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		CodeNode a = (CodeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CodeNode b = (CodeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new CodeSystem.CodeNodeDecls("function",i,a,b,t);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Decl ::= TIPO ID 
            {
              CodeNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new CodeSystem.CodeNodeDecls(t,i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Bloque ::= 
            {
              CodeNode RESULT =null;
		RESULT = new CodeSystem.CodeNodeEmpty();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bloque",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Bloque ::= Seque Bloque 
            {
              CodeNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CodeNode s = (CodeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CodeNode b = (CodeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new CodeSystem.CodeNodeBlock(s,b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bloque",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Bloque ::= Decl Bloque 
            {
              CodeNode RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CodeNode d = (CodeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CodeNode b = (CodeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new CodeSystem.CodeNodeBlock(d,b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bloque",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SymbolTable start_val = (SymbolTable)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Inicio ::= Bloque 
            {
              SymbolTable RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CodeNode b = (CodeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    SymbolTable symbolTable = new SymbolTable();
    b.run(symbolTable);
    RESULT = symbolTable;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

